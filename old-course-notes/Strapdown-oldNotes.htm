<!DOCTYPE html>
<html>
<title>PCC Course Slides | CIS 133J Java Programming I</title>
<!--
Theme options include:
amelia, cerulean, cyborg, united,
journal, readable, simplex, slate,
spacelab, spruce, superhero
-->
<xmp theme="cerulean" style="display:none;">
## Code comments

**Comments** are lines you add to the source code to document the program. Java ignores comment lines when it compiles the source code.

##### You can add comments to a Java program in three ways:
* single line
* multi-line
* javadoc


Single line comments begin with ```//```.
Here is an example:
```java
// This is the Hello World Java program.
public class Test
{
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
```
You can add multi-line comments like this:
```java
/* This is the Hello World
    Program */
public class Test
{
    public static void main(String[] args) {
        System.out.println("Helllo World");
    }
}
```
The last way to add comments is a special way for use with a program called **javadoc**. These are not discussed here.
```java
/** this is a javadoc comment. It starts with a slash and two
asterisks. */
```
Programs should **always** have comments that include the author, date, name of the program, and a description of the program.
```java
/*
    Program Name: Hello World
    Description: This program is the first Java program. It displays Hello World.
    Author: Terry Foty
    Date: May 25, 2003
*/
public class Test
{
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
```
## Naming rules and conventions

#### Rules
The Java naming rules **must** be followed or the compiler will flag the statement with an
error message.

##### When you create names for variables, constants, methods, classes, etc, the legal characters for Java names are:
* Uppercase letters
* lowercase letters
* digits (0-9)
* underscore

##### In your names you cannot use:
* reserved words (keywords)
* spaces
* special characters (%, &, *, etc.)
* cannot *begin* with a digit

##### These names would be legal:
* age
* Employee
* planet567

##### These names would *not* be legal:
* 567planet (can't start with a digit)
* Employee salary (has a blank space)
* age% (can't have a special character)
* int (is a reserved word)

#### Conventions
The Java naming rules must be followed. But there are also conventions used in naming
things in Java. You should follow them to be consistent with other programmers.

Class names should begin with an uppercase letter.

```java
public class Employee {
    // class code
}
```
Variables should begin with a lowercase letter and then capitalize each word.

```
age
planetDiameter
rateOfPay
```
Method names should begin with a lowercase letter and then capitalize each word.
```
displaySalary
monthlySalary
```
Constants should be all uppercase.
```
PI
TAXRATE
```
## Variables

#### Definition
A *variable* is a location in memory (RAM) that is used to store and retrieve data.

#### Declaring a variable
To declare a variable, choose a name for it and then select a data type.

#### Choosing a name for the variable
* Stick with letters (upper or lowercase), digits (0-9) or the underscore.
* Don't use spaces, special characters (*, &, !, etc.) when you name your variable.
* Don't start the name with a digit.
* Don't use a reserved word (keyword).

##### Some legal names for variables
* age
* rate
* city
* population
* lastName
* firstName
* birthDate
* zipcode

##### Some illegal names
* 123
* 12x
* 12age
* last name
* first Name
* last&name
* @age

The Java compiler will complain if you use an illegal name.

#### Choosing a data type for the variable.
Data comes in different types: *numeric*, and *text*.
##### Numeric data can be either:
* positive and negative whole numbers (e.g. 35, 0, 2789), or
* positive and negative decimal numbers (e.g. 29.99, 545436.44, 3.14159)

Text data consists of one or more characters (e.g. Larry, 121 Main Street, A1Moving)

Each of these types of data is stored in RAM memory in its own format. Whole numbers
are not stored like decimal numbers. Text data is not stored like whole numbers. For this
reason, you have to choose a data type for the data you will store in the variable. That is
so Java knows what format to use.

**Warning!** If you declare a variable of one data type and try to store data of a
different type in it, you will get an error.

Java provides a data type for each kind of data.
##### The choices for numeric data are:
* int
* long
* float
* double

##### The choices for text data are:
* String
* char

By the way, Java provides other data types but they are not discussed here.

#### What type of variable to use
The type of variable you use depends on your data.
##### Here is a guide:
* If the data is only whole numbers (positive or negative) use either the **int** or **long** types.
* If the data will be decimal numbers (positive or negative) use either the **float** or **double** types.
* If the data is a series of characters use the **String** type.
* If the data is one character use the **char** type.

**Note**: Always use **String** for social security number, street, phone number, and zipcode (becuase
these are considered text data).

#### Code samples
Now let's see some snippets of Java code that declare and use variables.
Use the **int** or **long** type to store whole numbers.
```java
int x;
int y;
int z;
x = 5;
y = 4;
z = x + y;
```
Use the **double** or **float** type to store decimal numbers.
```java
double d;
double k;
double z;
d = 456.789;
k = -12.34;
z = d + k;
```
Use the **String** type to store a series of characters.
```java
String lastName;
String firstName;
String SSN;
String zipcode;
lastName = "Nguyen";
firstName = "Ken";
SSN = "122456789";
zipcode = "97222";
```
Use the **char** type to store just one character.
```java
char c;
c = 'G';
```

#### Review questions
* What are the two categories of data discussed here?
* What data types can be used to hold a decimal value such as 3.145?
* What data type is used to hold **zipcode**?

##### Answers
* *numeric* and *text*
* **float** or **double**
* **String**


## The structure of a Java class definition
A Java program consists of one or more *class definitions*. Every class
definition has the same basic structure. After reading this document you
should be able to identify the components of any Java class definition.

#### Class wrapper
The class wrapper consists of the *class header* and the *class body*.

#### Class header
##### Three things are specified by the class header:
* the access modifier **public**
* the keyword **class**
* the name of the class (**Course**, below)

```java
public class Course // class header
{ // <-- begin class body
    // class fields
    private String instructor;
    private String room;
    private String timeAndDay;
    private List<Student> students;
    private int capacity;

    public LabClass(int maxNumberOfStudents)
    {
        instructor = "unknown";
        room = "unknown";
        timeAndDay = "unknown";
        students = new ArrayList<Student>();
        capacity = maxNumberOfStudents;
    }

    public int numberOfStudents()
    {
        return students.size();
    }
    // --> end class body
}
```
#### Class body
The class *body* above consists of everything between the first bracket
and the last bracket.

#### Class fields
The class *fields* are always listed immediately after the first bracket.
##### A field consists of:
* An access modifier (**private** or **public**)
* A data type
* The name of the field

#### Class methods
Immediately after the fields, the methods are listed.
##### A method consists of:
* The method header
* The body of the method

#### Method header
#####The method header consists of:
* The access modifier (**public** or **private**)
* The return type or the keyword **void**
* The method name
* A pair of parentheses
* Input *parameters*

```java
public void setUp(int maxNumberOfStudents) // method header
{
    // method body
    instructor = "unknown";
    room = "unknown";
    timeAndDay = "unknown";
    students = new ArrayList<Student>();
    capacity = maxNumberOfStudents;
}
```

#### Method body
The method body consists of everything between the beginning and ending brackets.
</xmp>
    <script src="http://strapdownjs.com/v/0.2/strapdown.js"></script>
</html>
